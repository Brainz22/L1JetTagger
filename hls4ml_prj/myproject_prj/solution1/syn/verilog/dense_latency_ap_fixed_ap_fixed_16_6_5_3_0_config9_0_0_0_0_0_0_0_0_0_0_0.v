// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config9_0_0_0_0_0_0_0_0_0_0_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [9:0] p_read;
input  [9:0] p_read1;
input  [9:0] p_read2;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [9:0] mul_ln708_fu_77_p0;
wire   [9:0] mul_ln708_10_fu_78_p0;
wire   [11:0] shl_ln_fu_140_p3;
wire   [12:0] zext_ln1118_fu_148_p1;
wire   [12:0] sub_ln1118_fu_152_p2;
wire  signed [13:0] sext_ln1118_fu_158_p1;
wire   [13:0] zext_ln1118_14_fu_136_p1;
wire   [13:0] sub_ln1118_80_fu_162_p2;
wire   [9:0] tmp_261_fu_168_p4;
wire   [13:0] shl_ln2_fu_182_p3;
wire   [13:0] sub_ln708_fu_190_p2;
wire   [9:0] tmp_fu_196_p4;
wire   [15:0] tmp_s_fu_214_p3;
wire   [16:0] zext_ln1118_15_fu_210_p1;
wire   [16:0] zext_ln1118_16_fu_222_p1;
wire   [16:0] sub_ln1118_81_fu_226_p2;
wire   [12:0] tmp_262_fu_232_p4;
wire   [14:0] mul_ln708_fu_77_p2;
wire   [10:0] tmp_1_fu_251_p4;
wire   [13:0] mul_ln708_10_fu_78_p2;
wire   [9:0] tmp_2_fu_270_p4;
wire  signed [13:0] sext_ln1118_75_fu_242_p1;
wire  signed [13:0] sext_ln708_fu_178_p1;
wire   [10:0] zext_ln703_fu_280_p1;
wire   [10:0] add_ln703_123_fu_290_p2;
wire   [13:0] add_ln703_fu_284_p2;
wire   [13:0] zext_ln703_28_fu_296_p1;
wire   [13:0] acc_1_V_fu_300_p2;
wire   [11:0] trunc_ln708_743_cast_fu_206_p1;
wire   [11:0] trunc_ln708_753_cast_fu_261_p1;
wire   [11:0] acc_8_V_fu_310_p2;
wire  signed [15:0] sext_ln703_fu_306_p1;
wire   [15:0] zext_ln703_29_fu_316_p1;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;
wire   [13:0] mul_ln708_10_fu_78_p00;
wire   [14:0] mul_ln708_fu_77_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= sext_ln703_fu_306_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_1_preg[0] <= 1'b0;
        ap_return_1_preg[1] <= 1'b0;
        ap_return_1_preg[2] <= 1'b0;
        ap_return_1_preg[3] <= 1'b0;
        ap_return_1_preg[4] <= 1'b0;
        ap_return_1_preg[5] <= 1'b0;
        ap_return_1_preg[6] <= 1'b0;
        ap_return_1_preg[7] <= 1'b0;
        ap_return_1_preg[8] <= 1'b0;
        ap_return_1_preg[9] <= 1'b0;
        ap_return_1_preg[10] <= 1'b0;
        ap_return_1_preg[11] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        ap_return_1_preg[11 : 0] <= zext_ln703_29_fu_316_p1[11 : 0];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = sext_ln703_fu_306_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = zext_ln703_29_fu_316_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_V_fu_300_p2 = (add_ln703_fu_284_p2 + zext_ln703_28_fu_296_p1);

assign acc_8_V_fu_310_p2 = (trunc_ln708_743_cast_fu_206_p1 + trunc_ln708_753_cast_fu_261_p1);

assign add_ln703_123_fu_290_p2 = (zext_ln703_fu_280_p1 + 11'd384);

assign add_ln703_fu_284_p2 = ($signed(sext_ln1118_75_fu_242_p1) + $signed(sext_ln708_fu_178_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign mul_ln708_10_fu_78_p0 = mul_ln708_10_fu_78_p00;

assign mul_ln708_10_fu_78_p00 = p_read2;

assign mul_ln708_10_fu_78_p2 = (mul_ln708_10_fu_78_p0 * $signed('hD));

assign mul_ln708_fu_77_p0 = mul_ln708_fu_77_p00;

assign mul_ln708_fu_77_p00 = p_read1;

assign mul_ln708_fu_77_p2 = (mul_ln708_fu_77_p0 * $signed('h15));

assign sext_ln1118_75_fu_242_p1 = $signed(tmp_262_fu_232_p4);

assign sext_ln1118_fu_158_p1 = $signed(sub_ln1118_fu_152_p2);

assign sext_ln703_fu_306_p1 = $signed(acc_1_V_fu_300_p2);

assign sext_ln708_fu_178_p1 = $signed(tmp_261_fu_168_p4);

assign shl_ln2_fu_182_p3 = {{p_read}, {4'd0}};

assign shl_ln_fu_140_p3 = {{p_read}, {2'd0}};

assign sub_ln1118_80_fu_162_p2 = ($signed(sext_ln1118_fu_158_p1) - $signed(zext_ln1118_14_fu_136_p1));

assign sub_ln1118_81_fu_226_p2 = (zext_ln1118_15_fu_210_p1 - zext_ln1118_16_fu_222_p1);

assign sub_ln1118_fu_152_p2 = (13'd0 - zext_ln1118_fu_148_p1);

assign sub_ln708_fu_190_p2 = (shl_ln2_fu_182_p3 - zext_ln1118_14_fu_136_p1);

assign tmp_1_fu_251_p4 = {{mul_ln708_fu_77_p2[14:4]}};

assign tmp_261_fu_168_p4 = {{sub_ln1118_80_fu_162_p2[13:4]}};

assign tmp_262_fu_232_p4 = {{sub_ln1118_81_fu_226_p2[16:4]}};

assign tmp_2_fu_270_p4 = {{mul_ln708_10_fu_78_p2[13:4]}};

assign tmp_fu_196_p4 = {{sub_ln708_fu_190_p2[13:4]}};

assign tmp_s_fu_214_p3 = {{p_read1}, {6'd0}};

assign trunc_ln708_743_cast_fu_206_p1 = tmp_fu_196_p4;

assign trunc_ln708_753_cast_fu_261_p1 = tmp_1_fu_251_p4;

assign zext_ln1118_14_fu_136_p1 = p_read;

assign zext_ln1118_15_fu_210_p1 = p_read1;

assign zext_ln1118_16_fu_222_p1 = tmp_s_fu_214_p3;

assign zext_ln1118_fu_148_p1 = shl_ln_fu_140_p3;

assign zext_ln703_28_fu_296_p1 = add_ln703_123_fu_290_p2;

assign zext_ln703_29_fu_316_p1 = acc_8_V_fu_310_p2;

assign zext_ln703_fu_280_p1 = tmp_2_fu_270_p4;

always @ (posedge ap_clk) begin
    ap_return_1_preg[15:12] <= 4'b0000;
end

endmodule //dense_latency_ap_fixed_ap_fixed_16_6_5_3_0_config9_0_0_0_0_0_0_0_0_0_0_0
