-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_ap_fixed_16_6_5_3_0_ap_ufixed_8_0_4_0_0_relu_config11_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of relu_ap_fixed_16_6_5_3_0_ap_ufixed_8_0_4_0_0_relu_config11_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln718_fu_84_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_96_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_242_fu_102_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_1_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_116_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln_fu_66_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln415_fu_120_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_243_fu_126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_241_fu_88_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_1_fu_146_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln718_59_fu_216_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_244_fu_208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_59_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_246_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln415_8_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_59_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln708_s_fu_198_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln415_59_fu_252_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_247_fu_258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_245_fu_220_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_59_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_8_fu_278_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_59_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_59_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_59_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_59_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_8_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1494_fu_184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1494_59_fu_316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= select_ln1494_fu_184_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= select_ln1494_59_fu_316_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln415_59_fu_252_p2 <= std_logic_vector(unsigned(zext_ln415_59_fu_248_p1) + unsigned(trunc_ln708_s_fu_198_p4));
    add_ln415_fu_120_p2 <= std_logic_vector(unsigned(zext_ln415_fu_116_p1) + unsigned(trunc_ln_fu_66_p4));
    and_ln415_1_fu_110_p2 <= (tmp_242_fu_102_p3 and or_ln412_fu_96_p2);
    and_ln415_8_fu_242_p2 <= (tmp_246_fu_234_p3 and or_ln412_59_fu_228_p2);
    and_ln416_59_fu_272_p2 <= (xor_ln416_59_fu_266_p2 and tmp_245_fu_220_p3);
    and_ln416_fu_140_p2 <= (xor_ln416_fu_134_p2 and tmp_241_fu_88_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1494_fu_184_p3, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= select_ln1494_fu_184_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, select_ln1494_59_fu_316_p3, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= select_ln1494_59_fu_316_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    icmp_ln1494_1_fu_60_p2 <= "1" when (signed(data_1_V_read) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_8_fu_192_p2 <= "1" when (signed(data_8_V_read) > signed(ap_const_lv16_0)) else "0";
    icmp_ln768_59_fu_294_p2 <= "1" when (p_Result_20_8_fu_278_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_162_p2 <= "1" when (p_Result_20_1_fu_146_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_59_fu_288_p2 <= "1" when (p_Result_20_8_fu_278_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_156_p2 <= "1" when (p_Result_20_1_fu_146_p4 = ap_const_lv6_3F) else "0";
    or_ln412_59_fu_228_p2 <= (trunc_ln718_59_fu_216_p1 or tmp_244_fu_208_p3);
    or_ln412_fu_96_p2 <= (trunc_ln718_fu_84_p1 or tmp_fu_76_p3);
    p_Result_20_1_fu_146_p4 <= data_1_V_read(15 downto 10);
    p_Result_20_8_fu_278_p4 <= data_8_V_read(15 downto 10);
    select_ln1494_59_fu_316_p3 <= 
        select_ln340_8_fu_308_p3 when (icmp_ln1494_8_fu_192_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln1494_fu_184_p3 <= 
        select_ln340_1_fu_176_p3 when (icmp_ln1494_1_fu_60_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln340_1_fu_176_p3 <= 
        add_ln415_fu_120_p2 when (select_ln777_fu_168_p3(0) = '1') else 
        ap_const_lv8_FF;
    select_ln340_8_fu_308_p3 <= 
        add_ln415_59_fu_252_p2 when (select_ln777_59_fu_300_p3(0) = '1') else 
        ap_const_lv8_FF;
    select_ln777_59_fu_300_p3 <= 
        icmp_ln879_59_fu_288_p2 when (and_ln416_59_fu_272_p2(0) = '1') else 
        icmp_ln768_59_fu_294_p2;
    select_ln777_fu_168_p3 <= 
        icmp_ln879_fu_156_p2 when (and_ln416_fu_140_p2(0) = '1') else 
        icmp_ln768_fu_162_p2;
    tmp_241_fu_88_p3 <= data_1_V_read(9 downto 9);
    tmp_242_fu_102_p3 <= data_1_V_read(1 downto 1);
    tmp_243_fu_126_p3 <= add_ln415_fu_120_p2(7 downto 7);
    tmp_244_fu_208_p3 <= data_8_V_read(2 downto 2);
    tmp_245_fu_220_p3 <= data_8_V_read(9 downto 9);
    tmp_246_fu_234_p3 <= data_8_V_read(1 downto 1);
    tmp_247_fu_258_p3 <= add_ln415_59_fu_252_p2(7 downto 7);
    tmp_fu_76_p3 <= data_1_V_read(2 downto 2);
    trunc_ln708_s_fu_198_p4 <= data_8_V_read(9 downto 2);
    trunc_ln718_59_fu_216_p1 <= data_8_V_read(1 - 1 downto 0);
    trunc_ln718_fu_84_p1 <= data_1_V_read(1 - 1 downto 0);
    trunc_ln_fu_66_p4 <= data_1_V_read(9 downto 2);
    xor_ln416_59_fu_266_p2 <= (tmp_247_fu_258_p3 xor ap_const_lv1_1);
    xor_ln416_fu_134_p2 <= (tmp_243_fu_126_p3 xor ap_const_lv1_1);
    zext_ln415_59_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_8_fu_242_p2),8));
    zext_ln415_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln415_1_fu_110_p2),8));
end behav;
