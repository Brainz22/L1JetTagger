-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv15_53 : STD_LOGIC_VECTOR (14 downto 0) := "000000001010011";
    constant ap_const_lv15_7FD2 : STD_LOGIC_VECTOR (14 downto 0) := "111111111010010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln708_fu_46_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1118_fu_47_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln708_fu_46_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_84_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1118_fu_47_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_s_fu_103_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln708_11_cast_fu_94_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_8_cast_fu_113_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_fu_117_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_47_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln708_fu_46_p00 : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv15_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_preg <= add_ln703_fu_117_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_fu_117_p2 <= std_logic_vector(unsigned(sext_ln708_11_cast_fu_94_p1) + unsigned(sext_ln708_8_cast_fu_113_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, add_ln703_fu_117_p2, ap_return_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return <= add_ln703_fu_117_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    mul_ln1118_fu_47_p0 <= mul_ln1118_fu_47_p00(8 - 1 downto 0);
    mul_ln1118_fu_47_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read1),15));
    mul_ln1118_fu_47_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln1118_fu_47_p0) * signed(ap_const_lv15_7FD2))), 15));
    mul_ln708_fu_46_p0 <= mul_ln708_fu_46_p00(8 - 1 downto 0);
    mul_ln708_fu_46_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read),15));
    mul_ln708_fu_46_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln708_fu_46_p0) * unsigned(ap_const_lv15_53), 15));
    sext_ln708_11_cast_fu_94_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_84_p4),15));
        sext_ln708_8_cast_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_fu_103_p4),15));

    tmp_fu_84_p4 <= mul_ln708_fu_46_p2(14 downto 2);
    trunc_ln708_s_fu_103_p4 <= mul_ln1118_fu_47_p2(14 downto 2);
end behav;
