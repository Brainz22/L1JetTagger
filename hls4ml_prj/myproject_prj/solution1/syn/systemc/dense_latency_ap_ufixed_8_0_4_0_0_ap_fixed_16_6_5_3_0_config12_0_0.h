// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0_HH_
#define _dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0 : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read1;
    sc_out< sc_lv<15> > ap_return;


    // Module declarations
    dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0(sc_module_name name);
    SC_HAS_PROCESS(dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0);

    ~dense_latency_ap_ufixed_8_0_4_0_0_ap_fixed_16_6_5_3_0_config12_0_0();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<8> > mul_ln708_fu_46_p0;
    sc_signal< sc_lv<8> > mul_ln1118_fu_47_p0;
    sc_signal< sc_lv<15> > mul_ln708_fu_46_p2;
    sc_signal< sc_lv<13> > tmp_fu_84_p4;
    sc_signal< sc_lv<15> > mul_ln1118_fu_47_p2;
    sc_signal< sc_lv<13> > trunc_ln708_s_fu_103_p4;
    sc_signal< sc_lv<15> > sext_ln708_11_cast_fu_94_p1;
    sc_signal< sc_lv<15> > sext_ln708_8_cast_fu_113_p1;
    sc_signal< sc_lv<15> > add_ln703_fu_117_p2;
    sc_signal< sc_lv<15> > ap_return_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_lv<15> > mul_ln1118_fu_47_p00;
    sc_signal< sc_lv<15> > mul_ln708_fu_46_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<15> ap_const_lv15_53;
    static const sc_lv<15> ap_const_lv15_7FD2;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<15> ap_const_lv15_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln703_fu_117_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_mul_ln1118_fu_47_p0();
    void thread_mul_ln1118_fu_47_p00();
    void thread_mul_ln1118_fu_47_p2();
    void thread_mul_ln708_fu_46_p0();
    void thread_mul_ln708_fu_46_p00();
    void thread_mul_ln708_fu_46_p2();
    void thread_sext_ln708_11_cast_fu_94_p1();
    void thread_sext_ln708_8_cast_fu_113_p1();
    void thread_tmp_fu_84_p4();
    void thread_trunc_ln708_s_fu_103_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
