// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s_HH_
#define _pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0.h"

namespace ap_rtl {

struct pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s : public sc_module {
    // Port declarations 67
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > data_2_V_read;
    sc_in< sc_lv<8> > data_6_V_read;
    sc_in< sc_lv<8> > data_7_V_read;
    sc_in< sc_lv<8> > data_12_V_read;
    sc_in< sc_lv<8> > data_16_V_read;
    sc_in< sc_lv<8> > data_17_V_read;
    sc_in< sc_lv<8> > data_22_V_read;
    sc_in< sc_lv<8> > data_26_V_read;
    sc_in< sc_lv<8> > data_27_V_read;
    sc_in< sc_lv<8> > data_32_V_read;
    sc_in< sc_lv<8> > data_36_V_read;
    sc_in< sc_lv<8> > data_37_V_read;
    sc_in< sc_lv<8> > data_42_V_read;
    sc_in< sc_lv<8> > data_46_V_read;
    sc_in< sc_lv<8> > data_47_V_read;
    sc_in< sc_lv<8> > data_52_V_read;
    sc_in< sc_lv<8> > data_56_V_read;
    sc_in< sc_lv<8> > data_57_V_read;
    sc_in< sc_lv<8> > data_62_V_read;
    sc_in< sc_lv<8> > data_66_V_read;
    sc_in< sc_lv<8> > data_67_V_read;
    sc_in< sc_lv<8> > data_72_V_read;
    sc_in< sc_lv<8> > data_76_V_read;
    sc_in< sc_lv<8> > data_77_V_read;
    sc_in< sc_lv<8> > data_82_V_read;
    sc_in< sc_lv<8> > data_86_V_read;
    sc_in< sc_lv<8> > data_87_V_read;
    sc_in< sc_lv<8> > data_92_V_read;
    sc_in< sc_lv<8> > data_96_V_read;
    sc_in< sc_lv<8> > data_97_V_read;
    sc_out< sc_lv<16> > ap_return_0;
    sc_out< sc_lv<16> > ap_return_1;
    sc_out< sc_lv<16> > ap_return_2;
    sc_out< sc_lv<16> > ap_return_3;
    sc_out< sc_lv<16> > ap_return_4;
    sc_out< sc_lv<16> > ap_return_5;
    sc_out< sc_lv<16> > ap_return_6;
    sc_out< sc_lv<16> > ap_return_7;
    sc_out< sc_lv<16> > ap_return_8;
    sc_out< sc_lv<16> > ap_return_9;
    sc_out< sc_lv<16> > ap_return_10;
    sc_out< sc_lv<16> > ap_return_11;
    sc_out< sc_lv<16> > ap_return_12;
    sc_out< sc_lv<16> > ap_return_13;
    sc_out< sc_lv<16> > ap_return_14;
    sc_out< sc_lv<16> > ap_return_15;
    sc_out< sc_lv<16> > ap_return_16;
    sc_out< sc_lv<16> > ap_return_17;
    sc_out< sc_lv<16> > ap_return_18;
    sc_out< sc_lv<16> > ap_return_19;
    sc_out< sc_lv<16> > ap_return_20;
    sc_out< sc_lv<16> > ap_return_21;
    sc_out< sc_lv<16> > ap_return_22;
    sc_out< sc_lv<16> > ap_return_23;
    sc_out< sc_lv<16> > ap_return_24;
    sc_out< sc_lv<16> > ap_return_25;
    sc_out< sc_lv<16> > ap_return_26;
    sc_out< sc_lv<16> > ap_return_27;
    sc_out< sc_lv<16> > ap_return_28;
    sc_out< sc_lv<16> > ap_return_29;


    // Module declarations
    pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s(sc_module_name name);
    SC_HAS_PROCESS(pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s);

    ~pointwise_conv_1d_cl_ap_ufixed_ap_fixed_16_6_5_3_0_config16_s();

    sc_trace_file* mVcdFile;

    pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0* call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246;
    pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0* call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_ready;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_0;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_1;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_2;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_3;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_4;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_5;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_6;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_7;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_8;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_9;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_10;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_11;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_12;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_13;
    sc_signal< sc_lv<16> > call_ret1_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_246_ap_return_14;
    sc_signal< sc_logic > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_ready;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_0;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_1;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_2;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_3;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_4;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_5;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_6;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_7;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_8;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_9;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_10;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_11;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_12;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_13;
    sc_signal< sc_lv<16> > call_ret_pointwise_conv_1d_latency_cl_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_fu_280_ap_return_14;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_16();
    void thread_ap_return_17();
    void thread_ap_return_18();
    void thread_ap_return_19();
    void thread_ap_return_2();
    void thread_ap_return_20();
    void thread_ap_return_21();
    void thread_ap_return_22();
    void thread_ap_return_23();
    void thread_ap_return_24();
    void thread_ap_return_25();
    void thread_ap_return_26();
    void thread_ap_return_27();
    void thread_ap_return_28();
    void thread_ap_return_29();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
